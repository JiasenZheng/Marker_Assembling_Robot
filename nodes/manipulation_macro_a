#!/usr/bin/env python

import moveit_commander
import moveit_msgs.msg 
from geometry_msgs.msg import Pose
from math import pi


import rospy

from group4.srv import GotoPos, DeltaMove, GetPose, CollisionSet, PoseMove

z_thresh = 0.2

cam_x = 0.0504
cam_y = 0.0315
cam_z = -0.054 #This value needs to be updated

cam_height = 0.26


class ManipulationMacroA:

    def __init__(self):
        
        self.above_marker_x_0 = rospy.get_param('/x2')
        self.above_marker_y_0 = rospy.get_param('/y2')

        #self.pitch_2_x = rospy.get_param('/pitch_2_x')
        #self.pitch_2_y = rospy.get_param('/pitch_2_y')

        self.above_marker_x = self.above_marker_x_0 #+  self.pitch_2_x
        self.above_marker_y = self.above_marker_y_0 #+  self.pitch_2_y


        self.above_cap_x_0 = rospy.get_param('/x3')
        self.above_cap_y_0 = rospy.get_param('/y3')

#        self.pitch_3_x = rospy.get_param('/pitch_3_x')
#        self.pitch_3_y = rospy.get_param('/pitch_3_y')

        self.above_cap_x = self.above_cap_x_0 #+  self.pitch_3_x
        self.above_cap_y = self.above_cap_y_0 #+  self.pitch_3_y



        self.above_master_x_0 = rospy.get_param('/x1')
        self.above_master_y_0 = rospy.get_param('/y1')

        self.above_master_x = self.above_master_x_0 #+  self.pitch_3_x
        self.above_master_y = self.above_master_y_0 #+  self.pitch_3_y


        self.robot = moveit_commander.RobotCommander()
        self.arm_group_name = "panda_arm"
        self.gripper_group_name = "hand"
        self.arm = moveit_commander.MoveGroupCommander(self.arm_group_name)
        self.gripper = moveit_commander.MoveGroupCommander(self.gripper_group_name)

        self.delta_move = rospy.ServiceProxy('/delta_move',DeltaMove)
        self.get_arm_pose = rospy.ServiceProxy('/get_arm_pose',GetPose)
        self.pose_move = rospy.ServiceProxy('/pose_move', PoseMove)

        self.go_to_marker = rospy.Service("/go_to_marker", GotoPos, self.handle_marker)
        self.go_to_cap = rospy.Service("/go_to_cap", GotoPos, self.handle_cap)
        self.go_to_master = rospy.Service("/go_to_master", GotoPos, self.handle_master)
        self.go_to_disposal = rospy.Service("/go_to_disposal",GotoPos,self.handle_disposal)


    def handle_marker(self, req):

        current = self.get_arm_pose()

        if current.pose.pose.position.z<z_thresh:
            dz = - current.pose.pose.position.z + z_thresh
            self.delta_move(2.0,dz)

        
        self.arm.set_named_target("ready")
        self.arm.go(wait=True)

        current = self.get_arm_pose()

        print('current.pose.pose.position.x ', current.pose.pose.position.x)
        print('current.pose.pose.position.y ' , current.pose.pose.position.y)
        print('self.above_marker_x' , self.above_marker_x ) 
        print('self.above_marker_y' , self.above_marker_y)  

        dx = - current.pose.pose.position.x + self.above_marker_x - cam_x
        dy = - current.pose.pose.position.y + self.above_marker_y - cam_y
        dz = cam_height - current.pose.pose.position.z  - cam_z


        self.delta_move(0.0,dx)
        print('dx ' , dx)

        self.delta_move(1.0,dy)
        print('dy ' , dy)

        self.delta_move(2.0,dz)
        print('dz ' , dz)

        current = self.get_arm_pose()

        if (abs(current.pose.pose.position.x) - (abs(self.above_marker_x) - cam_x)) < 0.01 and (abs(current.pose.pose.position.y) - (abs(self.above_marker_y) - cam_y)) < 0.01:
            return "Done"

        else:
            return "Failed"


    def handle_cap(self, req):

        current = self.get_arm_pose()

        if current.pose.pose.position.z<z_thresh:
            dz = - current.pose.pose.position.z + z_thresh
            self.delta_move(2.0,dz)

        
        self.arm.set_named_target("ready")
        self.arm.go(wait=True)

        current = self.get_arm_pose()

        print('current.pose.pose.position.x ', current.pose.pose.position.x)
        print('current.pose.pose.position.y ' , current.pose.pose.position.y)
        print('self.above_cap_x' , self.above_cap_x ) 
        print('self.above_cap_y' , self.above_cap_y)  

        dx = - current.pose.pose.position.x + self.above_cap_x - cam_x
        dy = - current.pose.pose.position.y + self.above_cap_y - cam_y
        dz = cam_height - current.pose.pose.position.z  - cam_z


        self.delta_move(0.0,dx)
        print('dx ' , dx)

        self.delta_move(1.0,dy)
        print('dy ' , dy)

        self.delta_move(2.0,dz)
        print('dz ' , dz)

        current = self.get_arm_pose()

        print('(abs(current.pose.pose.position.x) - (abs(self.above_cap_x) - cam_x)) ', (abs(current.pose.pose.position.x) - (abs(self.above_cap_x) - cam_x)))
        print('(abs(current.pose.pose.position.y) - (abs(self.above_cap_y) - cam_y))' , (abs(current.pose.pose.position.y) - (abs(self.above_cap_y) - cam_y)))


        if (abs(current.pose.pose.position.x) - (abs(self.above_cap_x) - cam_x)) < 0.01 and (abs(current.pose.pose.position.y) - (abs(self.above_cap_y) - cam_y)) < 0.01:
            return "Done"

        else:
            return "Failed"


    def handle_master(self, req):

        current = self.get_arm_pose()

        if current.pose.pose.position.z<z_thresh:
            dz = - current.pose.pose.position.z + z_thresh
            self.delta_move(2.0,dz)

        
        self.arm.set_named_target("ready")
        self.arm.go(wait=True)

        current = self.get_arm_pose()

        print('current.pose.pose.position.x ', current.pose.pose.position.x)
        print('current.pose.pose.position.y ' , current.pose.pose.position.y)
        print('self.above_masterx' , self.above_master_x ) 
        print('self.above_master_y' , self.above_master_y)  

        dx = - current.pose.pose.position.x + self.above_master_x - cam_x
        dy = - current.pose.pose.position.y + self.above_master_y - cam_y
        dz = cam_height - current.pose.pose.position.z  - cam_z


        self.delta_move(0.0,dx)
        print('dx ' , dx)

        self.delta_move(1.0,dy)
        print('dy ' , dy)

        self.delta_move(2.0,dz)
        print('dz ' , dz)

        current = self.get_arm_pose()

        print('(abs(current.pose.pose.position.x) - (abs(self.above_master_x) - cam_x)) ', (abs(current.pose.pose.position.x) - (abs(self.above_master_x) - cam_x)))
        print('(abs(current.pose.pose.position.y) - (abs(self.above_master_y) - cam_y))' , (abs(current.pose.pose.position.y) - (abs(self.above_master_y) - cam_y)))


        if (abs(current.pose.pose.position.x) - (abs(self.above_master_x) - cam_x)) < 0.01 and (abs(current.pose.pose.position.y) + (abs(self.above_master_y) - cam_y)) < 0.01:
            return "Done"

        else:
            return "Failed"



    def handle_disposal(self, req):

        current = self.get_arm_pose()

        if current.pose.pose.position.z<z_thresh:
            dz = - current.pose.pose.position.z + z_thresh
            self.delta_move(2.0,dz)

        self.disposal = Pose()
        
        self.disposalx = -0.1
        self.disposaly = -0.1
        self.disposalz = 0.3

        self.disposalrx = pi
        self.disposalry = 0
        self.disposalrz = -pi/4

        pose = [0.0, -0.4, 0.6, pi, 0.0, -pi/4]
        self.arm.set_pose_target(pose)
        self.arm.go(wait=True)

        current = self.get_arm_pose()

        print('1  ', (abs(current.pose.pose.position.x) - 0.0))
        print('2 ' ,(abs(current.pose.pose.position.y) - (0.4)))


        self.gripper.set_named_target("open")
        self.gripper.go(wait=True)

        if (abs(current.pose.pose.position.x) - 0.0) < 0.01 and (abs(current.pose.pose.position.y) - (0.4)) < 0.01:
            return "Done"

        else:
            return "Failed"



















def main():
    """
    Main function
    """
    rospy.init_node('manipulation_macro_a')
    macro_a = ManipulationMacroA()
    rospy.spin()

if __name__ == '__main__':
    main()