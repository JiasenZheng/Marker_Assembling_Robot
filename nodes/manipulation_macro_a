#!/usr/bin/env python

import moveit_commander
import moveit_msgs.msg 
from geometry_msgs.msg import Pose, Point, Vector3

from math import pi
import numpy as np

import rospy

from group4.srv import GotoPos, DeltaMove, GetPose, PoseMove

"""
The manipulation_macro_a node provides services to go to the 3 above tray locations, along with a backup disposal location

Services:
    /go_to_marker of type GotoPos uses Moveit to go to the above marker location
    /go_to_cap of type GotoPos uses Moveit to go to the above cap location
    /go_to_master of type GotoPos uses Moveit to go to the above master assembly location


Parameters:
    x1: master x location
    y1: master y location

    x2: marker x location
    y2: marker y location

    x3: cap x location
    y3: cap y location

"""




#Threshold to move linearly upwars to before lateral movement
z_thresh = 0.3



#Camera translation transformation numbers
cam_x = 0.0504
cam_y = 0.0315


#Camera height above 3 locations
cam_height_cap = 0.25
cam_height_master = 0.45
cam_height_marker = 0.36


class ManipulationMacroA:

    def __init__(self):
        

        #Define X and Y camera locations for marker, master, and cap locations

        self.above_marker_x_0 = rospy.get_param('/x2')
        self.above_marker_y_0 = rospy.get_param('/y2')

        self.above_marker_x = self.above_marker_x_0
        self.above_marker_y = self.above_marker_y_0

        self.above_cap_x_0 = rospy.get_param('/x3')
        self.above_cap_y_0 = rospy.get_param('/y3')

        self.above_cap_x = self.above_cap_x_0
        self.above_cap_y = self.above_cap_y_0

        self.above_master_x_0 = rospy.get_param('/x1')
        self.above_master_y_0 = rospy.get_param('/y1')

        self.above_master_x = self.above_master_x_0
        self.above_master_y = self.above_master_y_0



        #Define MoveIt groups
        self.robot = moveit_commander.RobotCommander()
        self.arm_group_name = "panda_arm"
        self.gripper_group_name = "hand"
        self.arm = moveit_commander.MoveGroupCommander(self.arm_group_name)
        self.gripper = moveit_commander.MoveGroupCommander(self.gripper_group_name)

        #Import supporting services
        self.delta_move = rospy.ServiceProxy('/delta_move',DeltaMove)
        self.get_arm_pose = rospy.ServiceProxy('/get_arm_pose',GetPose)
        self.pose_move = rospy.ServiceProxy('/pose_move', PoseMove)


        #Define main services
        self.go_to_marker = rospy.Service("/go_to_marker", GotoPos, self.handle_marker)
        self.go_to_cap = rospy.Service("/go_to_cap", GotoPos, self.handle_cap)
        self.go_to_master = rospy.Service("/go_to_master", GotoPos, self.handle_master)
        self.go_to_disposal = rospy.Service("/go_to_disposal",GotoPos,self.handle_disposal)


    def handle_marker(self, req):
        """
        handle_marker moves the robot arm to above the marker location
        Args:
            None
        Return:
            bool success status (True or False)
            Vector3 x,y,z position
            string error_msg
        """
        #Check and move in z if close to obstacles

        current = self.get_arm_pose()

        if current.pose.pose.position.z<z_thresh:
            dz = - current.pose.pose.position.z + z_thresh
            self.delta_move(2.0,dz)

        self.arm.set_named_target("ready")
        self.arm.go(wait=True)


        current = self.get_arm_pose()

        print('current.pose.pose.position.x ', current.pose.pose.position.x)
        print('current.pose.pose.position.y ' , current.pose.pose.position.y)
        print('self.above_marker_x' , self.above_marker_x ) 
        print('self.above_marker_y' , self.above_marker_y)  


        #Define XYZ linear maneuvers for above marker locations
        dx = - current.pose.pose.position.x + self.above_marker_x - cam_x
        dy = - current.pose.pose.position.y + self.above_marker_y - cam_y - 0.025
        dz = cam_height_marker - current.pose.pose.position.z

        ref_xyz = [(self.above_marker_x - cam_x), (self.above_marker_y - cam_y), (cam_height_marker)]

        #Actuate maneuvers
        self.delta_move(0.0,dx)
        print('dx ' , dx)

        self.delta_move(1.0,dy)
        print('dy ' , dy)

        self.delta_move(2.0,dz)
        print('dz ' , dz)



        #Check if the appopriate locations was reached, and return a "Done" or failed
        current = self.get_arm_pose()
        current_xyz = [current.pose.pose.position.x, current.pose.pose.position.y, current.pose.pose.position.z]

        x = current_xyz[0] #Add to other services
        y = current_xyz[1]
        z = current_xyz[2]

        pose = [x, y, z, pi, 0.0, -pi/4]

        self.arm.set_pose_target(pose)
        self.arm.go(wait=True)

        if self.isXYZClose(ref_xyz,current_xyz):
            success = True
            error_msg = f"Final XYZ matches reference{ref_xyz}"

        else:
            success = False
            error_msg = f"[ERROR]: Final XYZ {current_xyz} does not match the target pose {ref_xyz}"

        return success, Vector3(current_xyz[0],current_xyz[1],current_xyz[2]), error_msg

    def handle_cap(self, req):
        """
        handle_cap moves the robot arm to above the cap location
        Args:
            None
        Return:
            bool success status (True or False)
            Vector3 x,y,z position
            string error_msg
        """
        #Check current position for collisions, shift upwards if too low
        current = self.get_arm_pose()

        if current.pose.pose.position.z<z_thresh:
            dz = - current.pose.pose.position.z + z_thresh
            self.delta_move(2.0,dz)


        self.arm.set_named_target("ready")
        self.arm.go(wait=True)


        current = self.get_arm_pose()


        #Calculate XYZ Cartesian shift movements
        dx = - current.pose.pose.position.x + self.above_cap_x - cam_x
        dy = - current.pose.pose.position.y + self.above_cap_y - cam_y
        dz = cam_height_cap - current.pose.pose.position.z

        ref_xyz = [(self.above_cap_x), (self.above_cap_y), (cam_height_cap)]

        #Actuate maneuver
        self.delta_move(0.0,dx)
        print('dx ' , dx)

        self.delta_move(1.0,dy)
        print('dy ' , dy)

        self.delta_move(2.0,dz)
        print('dz ' , dz)


        #Check final position to see if it completed proprely        
        current = self.get_arm_pose()
        current_xyz = [current.pose.pose.position.x, current.pose.pose.position.y, current.pose.pose.position.z]


        x = current_xyz[0] #Add to other services
        y = current_xyz[1]
        z = current_xyz[2]

        pose = [x, y, z, pi, 0.0, -pi/4]

        self.arm.set_pose_target(pose)
        self.arm.go(wait=True)

        if self.isXYZClose(ref_xyz,current_xyz):
            success = True
            error_msg = f"Final XYZ matches reference{ref_xyz}"

        else:
            success = False
            error_msg = f"[ERROR]: Final XYZ {current_xyz} does not match the target pose {ref_xyz}"

        return success, Vector3(current_xyz[0],current_xyz[1],current_xyz[2]), error_msg


    def handle_master(self, req):
        """
        handle_master moves the robot arm to above the master location
        Args:
            None
        Return:
            bool success status (True or False)
            Vector3 x,y,z position
            string error_msg
        """
        #Check current position, shift upwards if too low
        current = self.get_arm_pose()

        if current.pose.pose.position.z<z_thresh:
            dz = - current.pose.pose.position.z + z_thresh
            self.delta_move(2.0,dz)


        self.arm.set_named_target("ready")
        self.arm.go(wait=True)


        current = self.get_arm_pose()


        #Calculate positions
        dx = - current.pose.pose.position.x + self.above_master_x - cam_x
        dy = - current.pose.pose.position.y + self.above_master_y - cam_y
        dz = cam_height_master - current.pose.pose.position.z

        ref_xyz = [(self.above_master_x), (self.above_master_y), (cam_height_master)]


        #Actuate maneuvers
        self.delta_move(0.0,dx)
        print('dx ' , dx)

        self.delta_move(1.0,dy)
        print('dy ' , dy)

        self.delta_move(2.0,dz)
        print('dz ' , dz)

        #Check final position for completion status
        current = self.get_arm_pose()
        current_xyz = [current.pose.pose.position.x, current.pose.pose.position.y, current.pose.pose.position.z]

        x = current_xyz[0] #Add to other services
        y = current_xyz[1]
        z = current_xyz[2]

        pose = [x, y, z, pi, 0.0, -pi/4]

        self.arm.set_pose_target(pose)
        self.arm.go(wait=True)

        if self.isXYZClose(ref_xyz,current_xyz):
            success = True
            error_msg = f"Final XYZ matches reference{ref_xyz}"

        else:
            success = False
            error_msg = f"[ERROR]: Final XYZ {current_xyz} does not match the target pose {ref_xyz}"

        return success, Vector3(current_xyz[0],current_xyz[1],current_xyz[2]), error_msg



    def handle_disposal(self, req):
        """
        handle_disposal moves the robot arm to above the disposal location
        Args:
            None
        Return:
            bool success status (True or False)
            Vector3 x,y,z position
            string error_msg
        """
        #Check the z height before moving to avoid collisions
        current = self.get_arm_pose()

        if current.pose.pose.position.z<z_thresh:
            dz = - current.pose.pose.position.z + z_thresh
            self.delta_move(2.0,dz)

        #Define disposal location, and go to it

        pose = [0.0, -0.4, 0.6, pi, 0.0, -pi/4]
        ref_xyz = [0.0, -0.4, 0.6]


        self.arm.set_pose_target(pose)
        self.arm.go(wait=True)

        current = self.get_arm_pose()
        current_xyz = [current.pose.pose.position.x, current.pose.pose.position.y, current.pose.pose.position.z]

        #Open gripper
        self.gripper.set_named_target("open")
        self.gripper.go(wait=True)


        if self.isXYZClose(ref_xyz,current_xyz):
            success = True
            error_msg = f"Final XYZ matches reference{ref_xyz}"

        else:
            success = False
            error_msg = f"[ERROR]: Final XYZ {current_xyz} does not match the target {ref_xyz}"

        return success, Vector3(current_xyz[0],current_xyz[1],current_xyz[2]), error_msg


    def isXYZClose(self, referencePose, currentPose):
        #Source/reference (11/28): https://numpy.org/doc/stable/reference/generated/numpy.allclose.html
        ref = self.poseToArray(referencePose)
        cur = self.poseToArray(currentPose)
        return np.allclose(ref, cur, atol = 0.05, rtol = 0.05)
        
    def poseToArray(self, pose):
        a1 = pose[0]
        a2 = pose[1]
        a3 = pose[2]
        print("array: " , np.array([a1,a2,a3]))
        return np.array([a1, a2, a3])

def main():
    """
    Main function
    """
    rospy.init_node('manipulation_macro_a')
    macro_a = ManipulationMacroA()
    rospy.spin()

if __name__ == '__main__':
    main()