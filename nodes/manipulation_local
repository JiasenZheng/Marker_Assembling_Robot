#! /usr/bin/env python

import rospy
import manipulation.trayPositions as tP
from manipulation.verificationUtilities import *
from group4.srv import TrayLocationMove, LocationMove, PoseMove, GetPose
from geometry_msgs.msg import Pose, Point, Quaternion, Vector3
from tf_conversions import transformations
import numpy as np


"""
Call a move to each tray location by specifying the tray number and location number and height level
"""

class LocalManipulationNode():
    def __init__(self):
        self.go_to_trayLocation = rospy.Service("go_to_trayLocation", TrayLocationMove, self.handle_goToTrayLocation)

        ## LATER IF NECESSARY
        # self.go_to_Assemblylocation = rospy.Service("go_to_assemblylocation", LocationMove, self.handle_goToAssemblyLocation)
        # self.go_to_Markerslocation = rospy.Service("go_to_markerslocation", LocationMove, self.handle_goToMarkersLocation)
        # self.go_to_Capslocation = rospy.Service("go_to_capslocation", LocationMove, self.handle_goToCapsLocation)

        self.move_to_pose = rospy.ServiceProxy("pose_move", PoseMove)
        self.cartesian_move_to_pose = rospy.ServiceProxy("cartesian_pose_move", PoseMove)
        self.get_current_pose = rospy.ServiceProxy("get_arm_pose", GetPose)

        ## The default orientation for all moves, so as to remain vertical in all interaction posiitoins
        # self.rpy = [np.pi, 0.0277365, -np.pi/4] ## will have to change/check the z rotation because of franka's offset
        self.default_rpy = [np.pi, -0.0212150281, -np.pi/4] ## will have to change/check the z rotation because of franka's offset

        #   x: 3.14260370
        #   y: -0.0212150281
        #   z: -0.78448429
        self.default_q = transformations.quaternion_from_euler(self.default_rpy[0], self.default_rpy[1], self.default_rpy[2] )

        ## Assembly Tray Parameters 
        ## zlist: [markerPlaceDownZ, capPlaceDownZ, capPressZ, standoffZ ]

        # self.assemblyX = rospy.get_param("/x1")
        # self.assemblyY = rospy.get_param("/y1")
        # self.assemblyXPitch = rospy.get_param("/pitch_1_x")
        # self.assemblyYPitch = rospy.get_param("/pitch_1_y")
        # self.assemblyZStandoff = rospy.get_param("/z1_standoff")
        # self.assemblyZPress = rospy.get_param("/z1_press")
        # self.assemblyZPlace = rospy.get_param("/z1_place")
        self.assemblyX = 0.4818641
        self.assemblyY = 0.000193013
        self.assemblyXPitch = 0.0508
        self.assemblyYPitch = 0.0762
        self.assemblyZStandoff = 0.27 #0.26
        self.assemblyZPress = 0.25
        self.assemblyZCapPlace = 0.228 #0.222945 #0.2
        self.assemblyZMarkerPlace = 0.19962
        self.assemblyZClear = 0.35


        ## Marker Tray Parameters
        ## zlist: [markerPickUpZ, standoffZ]

        # self.markersX = rospy.get_param("/x2")
        # self.markersY = rospy.get_param("/y2")
        # self.markersXPitch = rospy.get_param("/pitch_2_x")
        # self.markersyYPitch = rospy.get_param("/pitch_2_y")
        # self.markersZStandoff = rospy.get_param("/z2_standoff")
        # self.markersyZPick = rospy.get_param("/z2_pick")
        self.markersX = 0.3415  #0.343498
        self.markersY = -0.199562
        self.markersXPitch = 0.0508
        self.markersyYPitch = 0.0762
        self.markersZStandoff = 0.27
        self.markersZPick = 0.19962
        self.markersZClear = 0.35

        ## Cap Tray Parameters
        ## zlist: [capPickUpZ, standoffZ]

        # self.capsX = rospy.get_param("/x3")
        # self.capsY = rospy.get_param("/y3")
        # self.capsXPitch = rospy.get_param("/pitch_3_x")
        # self.capsyYPitch = rospy.get_param("/pitch_3_y")
        # self.capsZStandoff = rospy.get_param("/z3_standoff")
        # self.capsyZPick = rospy.get_param("/z3_pick")
        self.capsX = 0.343 #0.3451085
        self.capsY = 0.210
        self.capsXPitch = 0.0508
        self.capsyYPitch = 0.0635
        self.capsZStandoff = 0.27
        self.capsZPick = 0.124
        self.capsZClear = 0.35

        ## Setting up TrayPositions

        self.assemblyTray = tP.TrayPositions(
                            self.assemblyX, self.assemblyY, 
                            self.assemblyXPitch, self.assemblyYPitch,
                            sorted([self.assemblyZMarkerPlace, self.assemblyZCapPlace, 
                            self.assemblyZStandoff, self.assemblyZPress, self.assemblyZClear]))

        self.markersTray = tP.TrayPositions(
                            self.markersX, self.markersY, 
                            self.markersXPitch, self.markersyYPitch, 
                            sorted([self.markersZStandoff, self.markersZPick, self.markersZClear]))

        capsRPY = [np.pi, -0.0212150281, np.pi/4]
        self.capsTray = tP.TrayPositions(
                            self.capsX, self.capsY, 
                            self.capsXPitch, self.capsyYPitch, 
                            sorted([self.capsZStandoff, self.capsZPick, self.capsZClear]), 
                            capsRPY)

        ## Pose Matching tolerances

        # self.matchPositionTol = rospy.get_param("/match_position_tolerance", 0.002)
        # self.matchOrientationTol = rospy.get_param("/match_orientation_tolerance", 0.008802)
        self.matchPosTol = 0.002
        self.matchOrientTol = 0.005

    def handle_goToTrayLocation(self, req):

        ## xyz coords corresponding to specified tray, location and heightLevel
        if req.trayNumber == 1: ## assembly
            xyz = self.assemblyTray.get_location(req.location, req.heightLevel)
            rpy = self.assemblyTray.get_rpy()

        elif req.trayNumber == 2:  ## markers
            xyz = self.markersTray.get_location(req.location, req.heightLevel)
            rpy = self.markersTray.get_rpy()

        elif req.trayNumber == 3: ## caps
            xyz = self.capsTray.get_location(req.location, req.heightLevel)
            rpy = self.capsTray.get_rpy()

        ## Build up the pose representations for poseMove and for TargetPose comparison
        xyzPoint = Point(xyz[0], xyz[1], xyz[2])
        if not rpy:
            rpyOrientation = Vector3(self.default_rpy[0], self.default_rpy[1], self.default_rpy[2])
            qOrientation = Quaternion(self.default_q[0], self.default_q[1], self.default_q[2], self.default_q[3])

        else: 
            rpyOrientation = Vector3(rpy[0], rpy[1], rpy[2])
            q = transformations.quaternion_from_euler(rpy[0], rpy[1], rpy[2] )
            qOrientation = Quaternion(q[0], q[1], q[2], q[3]) 

        targetPose = Pose(xyzPoint, qOrientation)

        ## Command robot to move
        # self.move_to_pose(xyzPoint, rpyOrientation)
        self.cartesian_move_to_pose(xyzPoint, rpyOrientation, req.velocityLevel)
        rospy.sleep(0.2) ## MIGHT NOT BE NEEDED

        ## Verify Completed move
        currentPose = self.get_current_pose().pose
        success, msg = isPoseClose(currentPose.pose, targetPose, self.matchPosTol, self.matchOrientTol)

        return success, currentPose.pose, msg
        
if __name__ == "__main__":
    rospy.init_node("local_manipulation")
    node = LocalManipulationNode()
    rospy.spin()


# SAVED POSE FOR PICTURED DEMO
#   pose: 
#     position: 
#       x: 0.4862770240147619
#       y: 0.0011834753599661197
#       z: 0.2628842768456551
#     orientation: 
#       x: 0.925012409379751
#       y: -0.3799160576953355
#       z: -0.0028783647203887716
#       w: 0.0027471103433906376


## tray 1 loc 8 hL0
# pose: 
#   header: 
#     seq: 0
#     stamp: 
#       secs: 1637811024
#       nsecs: 886617660
#     frame_id: "panda_link0"
#   pose: 
#     position: 
#       x: 0.5305835695748329
#       y: 0.07681841928818005
#       z: 0.22017864091247175
#     orientation: 
#       x: -0.923290353056612
#       y: 0.3839470221322925
#       z: -0.009351918646839614
#       w: 0.005670076363189204
# rpy
# [-3.123939345305955, -0.01294017778980388, -0.7882980310115272]

