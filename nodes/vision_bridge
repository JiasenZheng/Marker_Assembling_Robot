#!/usr/bin/env python
""" A python node to read images from a web camera and process with opencv 
    Subscribes: usb_cam/image_raw (sensor_msgs/Image) - The input raw image
    Publishes: image_processed (sensor_msgs/Image) - The processed image
"""

from inspect import currentframe
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
import cv2
from vision.vision1 import detect_contour
from group4.srv import ImageCapture


class Bridge:

    def __init__(self):
        self.take_image = rospy.Service('capture', ImageCapture, self.capture_callback)
        # self.subscriber = rospy.Subscriber('/camera/color/image_raw', Image, )
        self._bridge = CvBridge()
        self._pub = rospy.Publisher("image_processed", Image, queue_size = 10)
        rospy.init_node("vision_bridge")

    # def callback(self,data):

    #     # Output debugging information to the terminal
    #     rospy.logerr("receiving video frame")
        
    #     #Convert ROS Image message to OpenCV image
    #     current_frame = self._bridge.imgmsg_to_cv2(data)
        
    #     #OpenCV stuff

    

    #     cv2.imshow("image", current_frame)
    #     cv2.imwrite("image.png", current_frame)

    #     # stopping the output

    #     # cv2.waitKey(1)

    #     # releasing all windows

    #     # cv2.destroyAllWindows()
    #     cv2.release()


    #     # manipulate with open cv
    #     # low_res = cv2.blur(current_frame, (50, 50))
    #     image_contour,grid = detect_contour(current_frame, grid_size = (1,3), pixel_size = [475,125], starting_pixel = [125,200])


    #     # convert to ROS
    #     msg = self._bridge.cv2_to_imgmsg(image_contour, "bgr8")
    #     # msg = self._bridge.cv2_to_imgmsg(low_res, "bgr8")

    #     self._pub.publish(msg)

    def capture_callback(self, req):
        rospy.logerr("service is working")
        
        if req.a == True:
            cap = cv2.VideoCapture('/dev/video1')
            success, image = cap.read()
            
            if success:
                rospy.logerr("cv2 is working")
                cv2.imshow("my_image", image)
                cv2.imwrite('/home/bhagyesh/Desktop/first_frame.jpg',image)
                # cv2.waitKey(0)
                # cv2.destroyAllWindows()
                msg = self._bridge.cv2_to_imgmsg(image, "bgr8")

                self._pub.publish(msg)

            
        
        # image_contour,grid = detect_contour(current_frame, grid_size = (1,3), pixel_size = [475,125], starting_pixel = [125,200])
        # msg = self._bridge.cv2_to_imgmsg(image_contour, "bgr8")
        # self._pub.publish(msg)

        return 1
        
        
if __name__ == "__main__":
    b = Bridge()
    rospy.spin()


