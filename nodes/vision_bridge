#!/usr/bin/env python
""" A python node to read images from a web camera and process with opencv 
    Subscribes: usb_cam/image_raw (sensor_msgs/Image) - The input raw image
    Publishes: image_processed (sensor_msgs/Image) - The processed image
"""

from inspect import currentframe
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
import cv2
from vision.vision1 import detect_contour
from group4.srv import ImageCapture
import numpy as np
from std_msgs.msg import Float32MultiArray, MultiArrayDimension


class Bridge:

    def __init__(self):
        self.take_image = rospy.Service('capture', ImageCapture, self.capture_callback)
        # self.subscriber = rospy.Subscriber('/camera/color/image_raw', Image, self.callback)
        self._bridge = CvBridge()
        self._pub = rospy.Publisher("image_processed", Image, queue_size = 10)
        rospy.init_node("vision_bridge")
        self.counter = 0
        self.image_frame = 50
        self.grid = None

    def callback(self,data):

        # Output debugging information to the terminal
        rospy.logerr("receiving video frame")
        
        #Convert ROS Image message to OpenCV image
        current_frame = self._bridge.imgmsg_to_cv2(data)
        
        #OpenCV stuff

        if self.counter == self.image_frame:
            cv2.imshow("image", current_frame)
            cv2.imwrite('/home/bhagyesh/Desktop/first_frame.jpg',current_frame)
            cv2.waitKey(0)
            cv2.destroyAllWindows()

            self.grid = [1, 2, 3, 4, 5]
            rospy.logerr(self.grid)

        rospy.logerr(self.counter)
        self.counter += 1

    def capture_callback(self, req):
        rospy.logerr("service is working")
        self.subscriber = rospy.Subscriber('/camera/color/image_raw', Image, self.callback)
        
        rospy.logerr(self.grid)
        return [self.grid]
        
        
if __name__ == "__main__":
    b = Bridge()
    rospy.spin()


