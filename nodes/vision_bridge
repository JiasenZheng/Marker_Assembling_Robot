#!/usr/bin/env python

""" A python node to read images from the RealSense camera and process with opencv 
    Subscribes: usb_cam/image_raw (sensor_msgs/Image) - The input raw image
    Publishes: image_processed (sensor_msgs/Image) - The processed image with contours
    
    Provides a service to return a list of 9 H values of the markers for specified tray location 
"""

from inspect import currentframe
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
import cv2
from vision.vision1 import detect_contour2
import vision.vision1 as v1
from group4.srv import ImageCapture
import numpy as np

class Bridge:
    """
    Convert ROS Image to Opencv Image, publish the image on image_processed service and provide a service to 
    return a list of H values depending on the location of the end effector.
    """

    def __init__(self):
        self.take_image = rospy.Service('capture', ImageCapture, self.capture_callback)
        self.subscriber = rospy.Subscriber('/camera/color/image_raw', Image, self.callback)
        self._bridge = CvBridge()
        self._pub = rospy.Publisher("image_processed", Image, queue_size = 10)
        rospy.init_node("vision_bridge")
        self.counter = 0
        self.image_frame = 50
        self.grid = None
        self.current_frame = None

    def callback(self,data):
        """
        Convert ROS image message to OpenCV image message, detect contours on the markers and 
        publish processed OpenCV image frames at certain fix frequency
        
        Args:
        data : ROS Image Message

        """

        self.current_frame = self._bridge.imgmsg_to_cv2(data, "bgr8")
        image_contour = v1.detect(self.current_frame)
        msg = self._bridge.cv2_to_imgmsg(image_contour, "bgr8")

        self._pub.publish(msg)
        
    

    def capture_callback(self, req):
        """
        Returns a list of H values of the markers for specified tray locations by making use of the detect_contour2 function
        from the vision package. 

        Args:
        req : tray_location (1 indicates assembly tray location, 2 indicates markers tray location and 3 indicates caps tray location)

        Returns:
        [self.grid] - list of 9 H values of the markers
        """
        
        tray_location = req.tray_location
        
        if tray_location == 1:
            image_contour, self.grid = detect_contour2(self.current_frame, grid_size = (3,3), pixel_size = (550,390), starting_pixel = (380,130))
        

        elif tray_location == 2: 
            image_contour, self.grid = detect_contour2(self.current_frame,grid_size=(3,3),pixel_size=(830,580),starting_pixel=(150,50))
        
        
        elif tray_location == 3:
            image_contour, self.grid = detect_contour2(self.current_frame, grid_size=(3,3), pixel_size=(910,650), starting_pixel=(180,0))
        
    
        return [self.grid]

        
if __name__ == "__main__":
    b = Bridge()
    rospy.spin()


