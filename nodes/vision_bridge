#!/usr/bin/env python

""" A python node to read images from a web camera and process with opencv 
    Subscribes: usb_cam/image_raw (sensor_msgs/Image) - The input raw image
    Publishes: image_processed (sensor_msgs/Image) - The processed image
"""

from inspect import currentframe
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
import cv2
from vision.vision1 import detect_contour2
from group4.srv import ImageCapture
import numpy as np
from std_msgs.msg import Float32MultiArray, MultiArrayDimension

class Bridge:

    def __init__(self):
        self.take_image = rospy.Service('capture', ImageCapture, self.capture_callback)
        self.subscriber = rospy.Subscriber('/camera/color/image_raw', Image, self.callback)
        self._bridge = CvBridge()
        self._pub = rospy.Publisher("image_processed", Image, queue_size = 10)
        rospy.init_node("vision_bridge")
        self.counter = 0
        self.image_frame = 50
        self.grid = None
        self.current_frame = None

    def callback(self,data):

        # Output debugging information to the terminal
        rospy.loginfo("receiving video frame")
        
        #Convert ROS Image message to OpenCV image
        self.current_frame = self._bridge.imgmsg_to_cv2(data)
        self.current_frame = cv2.cvtColor(self.current_frame, cv2.COLOR_BGR2RGB)
        

        #Convert Opencv_image to ros_image
        # msg = self._bridge.cv2_to_imgmsg(self.current_frame, "bgr8")

        #Publish the ros message on image_processed topic
        # self._pub.publish(msg)
    

    def capture_callback(self, req):
        rospy.loginfo("service is working")
        # self.subscriber = rospy.Subscriber('/camera/color/image_raw', Image, self.callback)

        # if self.counter == self.image_frame:
        
        tray_location = req.tray_location
        #At assembly
        if tray_location == 1:
            # cv2.imshow("image", self.current_frame)
            # cv2.imwrite('/home/bhagyesh/Desktop/first_frame.jpg', self.current_frame)
            image_contour, self.grid = detect_contour2(self.current_frame, grid_size = (3,3), pixel_size = (650,520), starting_pixel = (330,80))
        

        #At markers
        elif tray_location == 2: 
            image_contour, self.grid = detect_contour2(self.current_frame,grid_size=(3,3),pixel_size=(830,580),starting_pixel=(150,50))
            # cv2.imshow("image", image_contour)
            # cv2.imwrite('/home/bhagyesh/Desktop/first_frame.jpg', image_contour)
        
        
        #At caps
        elif tray_location == 3:

            # cv2.imshow("image", self.current_frame)
            # cv2.imwrite('/home/bhagyesh/Desktop/first_frame.jpg', self.current_frame)
            image_contour, self.grid = detect_contour2(self.current_frame, grid_size=(3,3), pixel_size=(910,650), starting_pixel=(180,0))
        
        
        
        # self.grid = [1, 2, 3, 4, 5]
        # cv2.waitKey(0)
        # cv2.destroyAllWindows()
        # rospy.logerr(self.grid)
        
        # self.grid = [1, 2, 3, 4, 5]
    
        return [self.grid]

        
if __name__ == "__main__":
    b = Bridge()
    rospy.spin()


